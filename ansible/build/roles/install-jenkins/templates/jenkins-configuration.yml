credentials:
  system:
    domainCredentials:
    - credentials:
      - usernamePassword:
          id: "gerrit-http"
          scope: GLOBAL
          username: "jenkins"
          password: "unknown"
      - usernamePassword:
          id: "jira-http"
          scope: GLOBAL
          username: "{{ services.jira.username }}"
          password: "{{ services.jira.password }}"
      - usernamePassword:
          id: "github-http"
          scope: GLOBAL
          username: "{{ services.github.username }}"
          password: "{{ services.github.username }}"
      - usernamePassword:
          id: "artifact-deploy-http"
          scope: GLOBAL
          username: "{{ services.artifactsDeployHttp.username }}"
          password: "{{ services.artifactsDeployHttp.username }}"
      - usernamePassword:
          id: "artifact-deploy-dev-http"
          scope: GLOBAL
          username: "{{ services.artifactsDeployDevHttp.username }}"
          password: "{{ services.artifactsDeployDevHttp.username }}"
      - usernamePassword:
          id: "artifact-deploy-public-http"
          scope: GLOBAL
          username: "{{ services.artifactsDeployPublicHttp.username }}"
          password: "{{ services.artifactsDeployPublicHttp.username }}"
      - usernamePassword:
          id: "docker-http"
          scope: GLOBAL
          username: "{{ services.dockerHttp.username }}"
          password: "{{ services.dockerHttp.username }}"
      - usernamePassword:
          id: "docker-dev-http"
          scope: GLOBAL
          username: "{{ services.dockerDevHttp.username }}"
          password: "{{ services.dockerDevHttp.username }}"
      - usernamePassword:
          id: "docker-public-http"
          scope: GLOBAL
          username: "{{ services.dockerPublicHttp.username }}"
          password: "{{ services.dockerPublicHttp.username }}"
      - basicSSHUserPrivateKey:
          scope: GLOBAL
          id: "gerrit-ssh"
          username: "jenkins"
          passphrase: ""
          description: "Jenkins user SSH key"
          privateKeySource:
            directEntry:
              privateKey: "${readFile:/home/jenkins/.ssh/id_rsa}"
 
jenkins:
  globalNodeProperties:
  - envVars:
      env:
      - key: "GLOBAL_PROPERTIES_DOCKER_BUILD_ARGS"
        value: "--build-arg DOCKER_URL={{ services.dockerHttp.url }} --build-arg DOCKER_PUSH_URL={{ services.dockerHttp.pushUrl }} --build-arg DOCKER_ORG={{ services.dockerHttp.org }} --build-arg BUILD_ID=${BUILD_ID}  --progress plain --progress plain --build-arg ARTIFACT_ORG={{ services.artifactsDeployHttp.org }}"
      - key: "DOCKER_ORG"
        value: "{{ services.dockerHttp.org }}"
      - key: "DOCKER_DEV_ORG"
        value: "{{ services.dockerDevHttp.org }}"
      - key: "DOCKER_PUSH_URL"
        value: "{{ services.dockerHttp.pushUrl }}"
      - key: "DOCKER_URL"
        value: "{{ services.dockerHttp.url }}"
      - key: "GERRIT_EMAIL"
        value: "jenkins@alpha-prosoft.com"
      - key: "GERRIT_URL"
        value: "gerrit.{{ environment.PrivateHostedZoneName }}"
      - key: "GERRIT_USER"
        value: "jenkins"
      - key: "GLOBAL_JIRA_URL"
        value: "{{ services.jira.url }}"
      - key: "GLOBAL_REPOSITORY_DEV_URL"
        value: "{{ services.artifactsDeployDevHttp.url }}"
      - key: "GLOBAL_REPOSITORY_PROD_URL"
        value: "{{ services.artifactsDeployHttp.url }}"
      - key: "GLOBAL_REPOSITORY_PUBLIC_URL"
        value: "{{ services.artifactsDeployPublicHttp.url }}"
      - key: "ARTIFACT_ORG"
        value: "{{ services.artifactsDeployHttp.org }}"
      - key: "ARTIFACT_DEV_ORG"
        value: "{{ services.artifactsDeployDevHttp.org }}"
      - key: "ARTIFACT_PUBLIC_ORG"
        value: "{{ services.artifactsDeployPublicHttp.org }}"
      - key: "GLOBAL_GROUP_ID"
        value: "{{ services.artifactsDeployHttp.org }}"
      - key: "CONFIG_FILE_URL"
        value: "s3://{{ environment.AccountId }}-{{ environment.EnvironmentNameLower }}-configuration/accounts.json"
      - key: "AWS_REGION"
        value: "{{ environment.Region }}"
      - key: "AWS_DEFAULT_REGION"
        value: "{{ environment.Region }}"
  clouds:
  - amazonEC2:
      name: "EC2 Builder Dev"
      region: "{{ environment.Region }}"
      sshKeysCredentialsId: "gerrit-ssh"
      templates:
      - ami: "{{ environment.AmiId }}"
        amiType:
          unixData:
            sshPort: "22"
        associatePublicIp: true
        connectBySSHProcess: false
        connectionStrategy: PRIVATE_IP
        customDeviceMapping: "/dev/xvda=:300:true:gp3::encrypted:500"
        deleteRootOnTermination: false
        description: "AWS Dev Workers"
        ebsOptimized: false
        hostKeyVerificationStrategy: 'OFF'
        iamInstanceProfile: "{{ environment.InstanceProfileArn }}"
        idleTerminationMinutes: "10"
        instanceCapStr: "1"
        labelString: "aws-dev-worker"
        maxTotalUses: -1
        minimumNumberOfInstances: 0
        minimumNumberOfSpareInstances: 0
        mode: NORMAL
        monitoring: false
        numExecutors: 2
        remoteAdmin: "jenkins"
        securityGroups: "{{ environment.InstanceSecurityGroupId }"
        stopOnTerminate: false
        subnetId: "{{ environment.PrivateSubnet1A }} {{ environment.PrivateSubnet2A }}"
        metadataEndpointEnabled: true
        metadataHopsLimit: 5
        metadataSupported: true
        metadataTokensRequired: true
        t2Unlimited: false
        type: C6i8xlarge
        useEphemeralDevices: false
        tmpDir: "/home/jenkins"
        remoteFS: "/home/jenkins/workdir"
        initScript: |-
          #/bin/bash

          set -e

          export EnvironmentNameUpper={{ environment.EnvironmentNameUpper }}
          export EnvironmentNameLower={{ environment.EnvironmentNameLower }}
          export EnvironmentNameLower={{ environment.EnvironmentNameLower }}
          export EnvironmentNameUpper={{ environment.EnvironmentNameUpper }}
          export EnvironmentNameUpper={{ environment.EnvironmentNameUpper }}
          export EnvironmentNameLower={{ environment.EnvironmentNameLower }}
          export ServiceName={{ environment.ServiceName }}
          export ServiceAlias={{ environment.ServiceAlias }}
          export Region={{ environment.Region }}
          export AccountId={{ environment.AccountId }}
          export Username={{ environment.Username }}

          /opt/login-job.sh

      useInstanceProfileForCredentials: true
  - amazonEC2:
      name: "EC2 Builder Prod"
      region: "{{ environment.Region }}"
      sshKeysCredentialsId: "gerrit-ssh"
      templates:
      - ami: "{{ environment.AmiId }}"
        amiType:
          unixData:
            sshPort: ""
        associatePublicIp: true
        connectBySSHProcess: false
        connectionStrategy: PRIVATE_IP
        customDeviceMapping: "/dev/xvda=:300:true:gp3::encrypted:500"
        deleteRootOnTermination: false
        description: "AWS Prod Workers"
        ebsOptimized: false
        hostKeyVerificationStrategy: 'OFF'
        iamInstanceProfile: "{{ environment.InstanceProfileArn }}"
        idleTerminationMinutes: "5"
        instanceCapStr: "1"
        labelString: "aws-prod-worker"
        maxTotalUses: -1
        minimumNumberOfInstances: 0
        minimumNumberOfSpareInstances: 0
        mode: NORMAL
        monitoring: false
        numExecutors: 1
        remoteAdmin: "jenkins"
        securityGroups: "{{ environment.InstanceSecurityGroupId }}"
        stopOnTerminate: false
        subnetId: "{{ environment.PrivateSubnet1A }} {{ environment.PrivateSubnet2A }}"
        metadataEndpointEnabled: true
        metadataHopsLimit: 5
        metadataSupported: true
        metadataTokensRequired: true
        t2Unlimited: false
        type: C6i4xlarge
        useEphemeralDevices: false
        tmpDir: "/home/jenkins"
        remoteFS: "/home/jenkins/workdir"
        initScript: |-
          #/bin/bash

          set -e

          export EnvironmentNameUpper={{ environment.EnvironmentNameUpper }}
          export EnvironmentNameLower={{ environment.EnvironmentNameLower }}
          export EnvironmentNameLower={{ environment.EnvironmentNameLower }}
          export EnvironmentNameUpper={{ environment.EnvironmentNameUpper }}
          export EnvironmentNameUpper={{ environment.EnvironmentNameUpper }}
          export EnvironmentNameLower={{ environment.EnvironmentNameLower }}
          export ServiceName={{ environment.ServiceName }}
          export ServiceAlias={{ environment.ServiceAlias }}
          export Region={{ environment.Region }}
          export AccountId={{ environment.AccountId }}
          export Username={{ environment.Username }}

          /opt/login-job.sh

      useInstanceProfileForCredentials: true


  agentProtocols:
  - "JNLP4-connect"
  - "Ping"
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  disableRememberMe: false
  labelAtoms:
  - name: "master"
  markupFormatter: "plainText"
  mode: NORMAL
  myViewsTabBar: "standard"
  numExecutors: 2
  primaryView:
    all:
      name: "all"
  projectNamingStrategy: "standard"
  quietPeriod: 5
  scmCheckoutRetryCount: 0
  securityRealm:
    reverseProxy:
      disableLdapEmailResolver: false
      forwardedUser: "A-User"
      headerGroups: "A-Groups"
      headerGroupsDelimiter: "|"
      inhibitInferRootDN: false
      updateInterval: 15
      userSearch: "uid={0}"
  slaveAgentPort: -1
  updateCenter:
    sites:
    - id: "default"
      url: "https://updates.jenkins.io/update-center.json"
  views:
  - all:
      name: "all"
  viewsTabBar: "standard"
security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  sSHD:
    port: -1
unclassified:
  bitbucketEndpointConfiguration:
    endpoints:
    - bitbucketCloudEndpoint:
        enableCache: false
        manageHooks: false
        repositoriesCacheDuration: 0
        teamCacheDuration: 0
  buildDiscarders:
    configuredBuildDiscarders:
    - "jobBuildDiscarder"
  defaultFolderConfiguration:
    healthMetrics:
    - worstChildHealthMetric:
        recursive: true
  fingerprints:
    fingerprintCleanupDisabled: false
    storage: "file"
  gitHubConfiguration:
    apiRateLimitChecker: ThrottleForNormalize
  gitHubPluginConfig:
    hookUrl: "https://{{ environment.ServiceAlias }}.{{ environment.PrivateHostedZoneName }}/github-webhook/"
  scmGit:
    createAccountBasedOnEmail: false
    showEntireCommitSummaryInChanges: false
    useExistingAccountWithSameEmail: false
  globalConfigFiles:
    configs:
    - globalMavenSettings:
        comment: "Global settings"
        content: |
          <settings>
            <servers>
              <server>
                <id>dev</id>
                <username>^§{ARTIFACT_USERNAME}</username>
                <password>^§{ARTIFACT_PASSWORD}</password>
              </server>
              <server>
                <id>prod</id>
                <username>^§{ARTIFACT_USERNAME}</username>
                <password>^§{ARTIFACT_PASSWORD}</password>
              </server>
              <server>
                <id>clojars</id>
                <username>^§{ARTIFACT_USERNAME}</username>
                <password>^§{ARTIFACT_PASSWORD}</password>
              </server>
            </servers>
          </settings>
        id: "global-maven-settings"
        isReplaceAll: true
        name: "Global maven settngs"
        providerId: "org.jenkinsci.plugins.configfiles.maven.GlobalMavenSettingsConfig"
        serverCredentialMappings:
        - credentialsId: "artifact-deploy-dev-http"
          serverId: "dev"
        - credentialsId: "artifact-deploy-http"
          serverId: "prod"
        - credentialsId: "artifact-deploy-public-http"
          serverId: "clojars"

  location:
    adminAddress: "address not configured yet <nobody@nowhere>"
    url: "https://{{ environment.ServiceAlias }}.{{ environment.PrivateHostedZoneName }}/"
  mailer:
    charset: "UTF-8"
    useSsl: false
    useTls: false
  pollSCM:
    pollingThreadCount: 10
tool:
  git:
    installations:
    - home: "git"
      name: "Default"
